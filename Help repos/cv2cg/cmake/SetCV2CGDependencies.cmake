### OpenCV
OPTION(USE_OPENCV_STATIC "Use static version of OpenCV" OFF)
if(USE_OPENCV_STATIC)
	set(OpenCV_STATIC ON)
	if(WIN32)
		set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
		set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
	endif()
endif()
FIND_PACKAGE(OpenCV REQUIRED)
SET(CV2CG_3RDPARTY_LINKEROPTION
	${CV2CG_3RDPARTY_LINKEROPTION}
	${OpenCV_LIBS}
)

### Eigen
#FIND_PACKAGE(Eigen3 REQUIRED)
#INCLUDE_DIRECTORIES(
#	${EIGEN3_INCLUDE_DIR}
#)

### LCH
if(NOT LCH_INCLUDE_DIR)
	set(LCH_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/lch/include/" CACHE PATH "include directory for LCH")
endif()
if(EXISTS ${LCH_INCLUDE_DIR}/lch.hpp)
	include_directories(${LCH_INCLUDE_DIR})
	message(STATUS "LCH: ${LCH_INCLUDE_DIR}")
else()
	message(FATAL_ERROR "Please specify a valid root directory for LCH (https://github.com/simbaforrest/lch.git)!")
endif()

### FlyCap
OPTION(USE_FLYCAP "Use Point Grey FlyCapture2 library" OFF)
IF(USE_FLYCAP)
	add_definitions( -DUSE_FLYCAP )
	FIND_PACKAGE(FlyCapture REQUIRED)
	INCLUDE_DIRECTORIES(
		${FLYCAPTURE_INCLUDE_PATH}
	)
	SET(CV2CG_3RDPARTY_LINKEROPTION
		${CV2CG_3RDPARTY_LINKEROPTION}
		${FLYCAPTURE_LIBRARY}
	)
	message(STATUS "FLYCAP include: ${FLYCAPTURE_INCLUDE_PATH}")
	message(STATUS "FLYCAP libs: ${FLYCAPTURE_LIBRARY}")
ENDIF()

### LCM
OPTION(USE_LCM "Use LCM for inter-process communication" OFF)
IF(USE_LCM)
	FIND_PACKAGE(LCM REQUIRED)
	INCLUDE_DIRECTORIES(
		${LCM_INCLUDE_DIR}
		${LCM_INCLUDE_DIR}/WinSpecific/include
	)
	SET(CV2CG_3RDPARTY_LINKEROPTION
		${CV2CG_3RDPARTY_LINKEROPTION}
		${LCM_LIBRARY}
	)
	message(STATUS "LCM include: ${LCM_INCLUDE_DIR}")
	message(STATUS "LCM libs: ${LCM_LIBRARY}")
ENDIF()